package za.co.swingy.view.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import za.co.swingy.controller.GameController;
import za.co.swingy.controller.InventoryController;
import za.co.swingy.model.items.Helm;
import za.co.swingy.view.InventoryView;

import javax.swing.*;
import javax.validation.constraints.NotNull;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import static com.sun.java.accessibility.util.AWTEventMonitor.addActionListener;

public class InventoryGuiView extends FrameView implements InventoryView {
	private JPanel mainPanel;
	private JTextArea inventoryTextArea;
	private JTextArea textArea1;
	private JTextArea textArea2;
	private JButton returnButton;
	private JButton button2;
	private JPanel helmsPanel;
	private JScrollPane helmsScrollPanel;
	private JTextArea weaponTextArea;

	@NotNull
	private InventoryController controller;

	public InventoryGuiView(GameController gameController) {
		this.controller = InventoryController.builder().inventoryView(this).hero(gameController.getHero()).gameController(gameController).build();
	}

	public void display() {
		int list = 0;
		this.helmsPanel.removeAll();
		this.helmsPanel.updateUI();
		GridBagConstraints gbc = new GridBagConstraints();
		for (int i = 0; i < this.controller.getHero().getInventory().getHelms().size(); i++) {
			Helm h = this.controller.getHero().getInventory().getHelms().get(i);
//			for (int col = 0; col < 3; col++) {

			//Display information
			gbc.gridx = 0;
			gbc.gridy = i;
			JTextArea helmTextArea = new JTextArea();
			helmTextArea.setBackground(new Color(-11645362));
			helmTextArea.setCaretColor(new Color(-4342339));
			helmTextArea.setForeground(new Color(-4342339));
			helmTextArea.setText("	" + h.getName() + " level: " + h.getLevel() + " hitPoint increase: " + h.getHitPointIncrease());
			helmsPanel.add(helmTextArea, gbc);

			//Show equip button
			gbc.gridx = 1;
			gbc.gridy = i;
			JButton equipButton = new JButton();
			if (i == this.controller.getHero().getInventory().getEquippedHelmIndex()) {
//				System.out.println("|	[" + (i + 1 + list) + "] " + h.getName() + " level: " + h.getLevel() + " hitPoint increase: " + h.getHitPointIncrease() + "     [EQUIPPED]");
				equipButton.setLabel("EQUIP");
				equipButton.setText("EQUIP");
			} else {
//				System.out.println("|	[" + (i + 1 + list) + "] " + h.getName() + " level: " + h.getLevel() + " hitPoint increase: " + h.getHitPointIncrease());
				equipButton.setLabel("EQUIPPED");
				equipButton.setText("EQUIPPED");
				equipButton.setEnabled(false);
			}
			helmsPanel.add(equipButton, gbc);

			//DeleteButton
			gbc.gridx = 2;
			gbc.gridy = i;
			JButton deleteButton = new JButton();
			deleteButton.setLabel("DELETE");
			deleteButton.setText("DELETE");
			deleteButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					controller.delete((i + 1 + list));
				}
			});

//			}
		}

	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(11, 4, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.setBackground(new Color(-12566464));
		mainPanel.setForeground(new Color(-4342339));
		mainPanel.setMaximumSize(new Dimension(560, 560));
		mainPanel.setMinimumSize(new Dimension(560, 560));
		mainPanel.setPreferredSize(new Dimension(560, 560));
		inventoryTextArea = new JTextArea();
		inventoryTextArea.setBackground(new Color(-12566464));
		inventoryTextArea.setCaretColor(new Color(-4342339));
		inventoryTextArea.setEditable(false);
		Font inventoryTextAreaFont = this.$$$getFont$$$(null, Font.BOLD, -1, inventoryTextArea.getFont());
		if (inventoryTextAreaFont != null) inventoryTextArea.setFont(inventoryTextAreaFont);
		inventoryTextArea.setForeground(new Color(-4342339));
		inventoryTextArea.setText("Inventory");
		mainPanel.add(inventoryTextArea, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(100, 25), new Dimension(100, 25), new Dimension(100, 25), 0, false));
		final Spacer spacer1 = new Spacer();
		mainPanel.add(spacer1, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 10), new Dimension(-1, 10), new Dimension(-1, 10), 0, false));
		final Spacer spacer2 = new Spacer();
		mainPanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(20, -1), new Dimension(20, -1), new Dimension(20, -1), 0, false));
		final Spacer spacer3 = new Spacer();
		mainPanel.add(spacer3, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		mainPanel.add(spacer4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(-1, 20), new Dimension(-1, 20), 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		scrollPane1.setBackground(new Color(-11645362));
		scrollPane1.setForeground(new Color(-11645362));
		mainPanel.add(scrollPane1, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(480, 100), new Dimension(480, 100), new Dimension(480, 100), 0, false));
		textArea2 = new JTextArea();
		textArea2.setBackground(new Color(-11645362));
		textArea2.setCaretColor(new Color(-4342339));
		textArea2.setForeground(new Color(-4342339));
		scrollPane1.setViewportView(textArea2);
		final JTextArea textArea3 = new JTextArea();
		textArea3.setBackground(new Color(-12566464));
		textArea3.setCaretColor(new Color(-4342339));
		textArea3.setEditable(false);
		Font textArea3Font = this.$$$getFont$$$(null, Font.BOLD, -1, textArea3.getFont());
		if (textArea3Font != null) textArea3.setFont(textArea3Font);
		textArea3.setForeground(new Color(-4342339));
		textArea3.setText("Armor:");
		mainPanel.add(textArea3, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(150, 20), new Dimension(-1, 20), 0, false));
		final JTextArea textArea4 = new JTextArea();
		textArea4.setBackground(new Color(-12566464));
		textArea4.setCaretColor(new Color(-4342339));
		textArea4.setEditable(false);
		Font textArea4Font = this.$$$getFont$$$(null, Font.BOLD, -1, textArea4.getFont());
		if (textArea4Font != null) textArea4.setFont(textArea4Font);
		textArea4.setForeground(new Color(-4342339));
		textArea4.setText("Capacity");
		mainPanel.add(textArea4, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 25), new Dimension(150, 25), new Dimension(-1, 25), 0, false));
		textArea1 = new JTextArea();
		textArea1.setBackground(new Color(-12566464));
		textArea1.setCaretColor(new Color(-4342339));
		textArea1.setForeground(new Color(-4342339));
		mainPanel.add(textArea1, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 25), new Dimension(150, 25), new Dimension(-1, 25), 0, false));
		final JScrollPane scrollPane2 = new JScrollPane();
		scrollPane2.setBackground(new Color(-11645362));
		scrollPane2.setForeground(new Color(-11645362));
		mainPanel.add(scrollPane2, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(480, 100), new Dimension(480, 100), new Dimension(480, 100), 0, false));
		weaponTextArea = new JTextArea();
		weaponTextArea.setBackground(new Color(-11645362));
		weaponTextArea.setCaretColor(new Color(-4342339));
		weaponTextArea.setForeground(new Color(-4342339));
		weaponTextArea.setText("Testytesty");
		scrollPane2.setViewportView(weaponTextArea);
		helmsScrollPanel = new JScrollPane();
		helmsScrollPanel.setBackground(new Color(-11645362));
		helmsScrollPanel.setForeground(new Color(-11645362));
		mainPanel.add(helmsScrollPanel, new GridConstraints(8, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(480, 100), new Dimension(480, 100), new Dimension(480, 100), 0, false));
		helmsPanel = new JPanel();
		helmsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		helmsPanel.setBackground(new Color(-11645362));
		helmsPanel.setForeground(new Color(-4342339));
		helmsScrollPanel.setViewportView(helmsPanel);
		final JTextArea textArea5 = new JTextArea();
		textArea5.setBackground(new Color(-12566464));
		textArea5.setCaretColor(new Color(-4342339));
		textArea5.setEditable(false);
		Font textArea5Font = this.$$$getFont$$$(null, Font.BOLD, -1, textArea5.getFont());
		if (textArea5Font != null) textArea5.setFont(textArea5Font);
		textArea5.setForeground(new Color(-4342339));
		textArea5.setText("Weapon:");
		mainPanel.add(textArea5, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(150, 20), new Dimension(-1, 20), 0, false));
		final JTextArea textArea6 = new JTextArea();
		textArea6.setBackground(new Color(-12566464));
		textArea6.setCaretColor(new Color(-4342339));
		textArea6.setEditable(false);
		Font textArea6Font = this.$$$getFont$$$(null, Font.BOLD, -1, textArea6.getFont());
		if (textArea6Font != null) textArea6.setFont(textArea6Font);
		textArea6.setForeground(new Color(-4342339));
		textArea6.setText("Helm:");
		mainPanel.add(textArea6, new GridConstraints(7, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(150, 20), new Dimension(-1, 20), 0, false));
		returnButton = new JButton();
		returnButton.setEnabled(false);
		returnButton.setLabel("RETURN");
		returnButton.setText("RETURN");
		mainPanel.add(returnButton, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		button2 = new JButton();
		button2.setText("Button");
		mainPanel.add(button2, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}

}
