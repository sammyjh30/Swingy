package za.co.swingy.view.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Getter;
import lombok.Setter;
import za.co.swingy.controller.CharacterController;
import za.co.swingy.view.MenuView;
import za.co.swingy.view.console.CreateHeroConsoleView;
import za.co.swingy.view.console.LoadFileConsoleView;

import javax.swing.*;
import javax.validation.constraints.NotNull;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

@Getter
@Setter
public class MenuGuiView implements MenuView {
	private JFrame frame;
	private CharacterController characterController;
	private JTextArea welcomeToSwingyWhatTextArea;
	private JButton newButton;
	private JButton loadButton;
	private JButton exitButton;
	@NotNull
	private JPanel mainPanel;

	public MenuGuiView(JFrame frame) {
//		welcomeToSwingyWhatTextArea = new JTextArea();
//		newButton = new JButton();
//		loadButton = new JButton();
//		exitButton = new JButton();
//		mainPanel = new JPanel();
//
//		mainPanel.add(welcomeToSwingyWhatTextArea);
//		mainPanel.add(newButton);
//		mainPanel.add(loadButton);
//		mainPanel.add(exitButton);

		this.characterController = CharacterController.builder().menuView(this).createHeroView(new CreateHeroGuiView(frame)).loadFileView(new LoadFileGuiView()).build();
		this.frame = frame;

		loadButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				characterController.loadHero();
			}
		});

		exitButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.exit(1);
			}
		});
		newButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				mainPanel.setVisible(false);
				characterController.createNewHero();

			}
		});

	}

	public void menu() {
		this.frame.setContentPane(this.mainPanel);
		this.frame.pack();
		this.mainPanel.setVisible(true);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel1.setBackground(new Color(-12566464));
		panel1.setMaximumSize(new Dimension(560, 560));
		panel1.setMinimumSize(new Dimension(560, 560));
		panel1.setPreferredSize(new Dimension(560, 560));
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(7, 4, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.setBackground(new Color(-12566464));
		panel1.add(mainPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(560, 560), new Dimension(560, 560), new Dimension(560, 560), 0, false));
		welcomeToSwingyWhatTextArea = new JTextArea();
		welcomeToSwingyWhatTextArea.setBackground(new Color(-12566464));
		welcomeToSwingyWhatTextArea.setDisabledTextColor(new Color(-4473925));
		welcomeToSwingyWhatTextArea.setEditable(false);
		welcomeToSwingyWhatTextArea.setEnabled(false);
		Font welcomeToSwingyWhatTextAreaFont = this.$$$getFont$$$(null, Font.BOLD, 16, welcomeToSwingyWhatTextArea.getFont());
		if (welcomeToSwingyWhatTextAreaFont != null)
			welcomeToSwingyWhatTextArea.setFont(welcomeToSwingyWhatTextAreaFont);
		welcomeToSwingyWhatTextArea.setText("     Welcome to Swingy!\nWhat would you like to do?");
		mainPanel.add(welcomeToSwingyWhatTextArea, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 100), new Dimension(150, 100), new Dimension(-1, 100), 2, false));
		final Spacer spacer1 = new Spacer();
		mainPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		mainPanel.add(spacer2, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel2.setBackground(new Color(-12566464));
		panel2.setForeground(new Color(-12566464));
		mainPanel.add(panel2, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, 50), null, new Dimension(-1, 150), 0, false));
		final Spacer spacer3 = new Spacer();
		mainPanel.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 150), new Dimension(-1, 150), new Dimension(-1, 150), 0, false));
		newButton = new JButton();
		newButton.setText("New");
		mainPanel.add(newButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(148, 30), null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setEnabled(true);
		label1.setForeground(new Color(-4342339));
		label1.setText("Create a new hero.");
		mainPanel.add(label1, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		loadButton = new JButton();
		loadButton.setText("Load");
		mainPanel.add(loadButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		exitButton = new JButton();
		exitButton.setText("Exit");
		mainPanel.add(exitButton, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setForeground(new Color(-4342339));
		label2.setText("Load a previous hero.");
		mainPanel.add(label2, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setForeground(new Color(-4342339));
		label3.setText("Leave the game, duh!");
		mainPanel.add(label3, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		mainPanel.add(spacer4, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 150), new Dimension(-1, 150), new Dimension(-1, 150), 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}
}
